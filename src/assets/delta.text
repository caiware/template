1 <html>
 2     <head>
 3         <title></title>
 4         <style>
 5             .showBox {
 6                 width: 400px;
 7                 min-height: 100px;
 8                 padding: 10px;
 9                 border: 1px solid #000;
10             }
11 
12             .text {
13                 background: orange;
14             }
15         </style>
16     </head>
17     <div class="showBox">唧唧复唧唧，木兰当户织。不闻机杼声，唯闻女叹息。
18 问女何所思，问女何所忆。女亦无所思，女亦无所忆。昨夜见军帖，可汗大点兵，军书十二卷，卷卷有爷名。阿爷无大儿，木兰无长兄，愿为市鞍马，从此替爷征。
19 东市买骏马，西市买鞍鞯，南市买辔头，北市买长鞭。旦辞爷娘去，暮宿黄河边，不闻爷娘唤女声，但闻黄河流水鸣溅溅。旦辞黄河去，暮至黑山头，不闻爷娘唤女声，但闻燕山胡骑鸣啾啾。
20     </div>
21     <p>
22         <input placeholder="请输入关键字" class="inputEl"/>
23         <button onclick="sendMsg()">查找</button>
24     </p>
25     <script>
26         var originalText = document.getElementsByClassName('showBox')[0].innerText;
27         function sendMsg() {
28             var text = originalText;
29             var history = document.getElementsByClassName('text');
30             if (history.length > 0) {
31                 text = originalText;
32             }
33             var inputValue = document.getElementsByClassName('inputEl')[0].value;
34             var found = findAll(text, inputValue);
35             for (var i = 0; i < text.length; i++) {
36                 for (var j in found) {
37                     if (i == found[j]) {
38                         text = originalText.split(inputValue).join(`<span class="text">${inputValue}</span>`);
39 40                     }
41                 }
42             }
43             document.getElementsByClassName('showBox')[0].innerHTML = text;
44             document.getElementsByClassName('inputEl')[0].value = "";
45         }
46         function findAll(str, x) {
47             var results = [];
48             var len = str.length;
49             var pos = 0;
50             while (pos < len) {
51                 pos = str.indexOf(x, pos);
52                 if (pos === -1)
53                     break;
54                 results.push(pos);
55                 pos = pos + 1;
56             }
57             return results;
58         }
59     </script>
60 </html>

//动画文字
// keyframes 可根据展示的文本长度，自行添加，我的格式为： @keyframes  ‘type’+'文本长度'
@keyframes typing10 {
  from {
    width: 0;
  }
  50% {
    width: 10ch;
  }
  100% {
    width: 0
  }
}
@keyframes typing4 {
  from {
    width: 0;
  }
  50% {
    width: 4ch;
  }
  100% {
    width: 0
  }
}
@keyframes typing6 {
  from {
    width: 0;
  }
  50% {
    width: 6ch;
  }
  100% {
    width: 0
  }
}
@keyframes caret { 50% { border-color: transparent; } }
h1 {
  width: 0;
  animation: typing 6s steps(15) infinite,caret 1s steps(1) infinite;
  white-space: nowrap;
  overflow:hidden;
  border-right: .05em solid;
  font-family: Consolas, Monaco, monospace;//注意这儿，要设置字体为等宽字体,ch才会充分发挥效果
}


const arr = ['TypeScript','JavaScript','小程序','less','sass' ];//显示的文本
const dom = document.getElementById('box')
let j = 0; //从数组第一个开始展示
// 递归函数
const func =(j) => {
  if(j < arr.length){ // 当达到数组长度时，就从头开始继续
    const item = arr[j]
    const itemLen = item === '小程序' ? 6 : item.length; // 汉字是占两个ch
    dom.innerHTML = item; // 显示文字
    for (var i = 0, len = itemLen; i < len; i++) { // 添加文本效果
      var textLen = dom.textContent.length, s = dom.style;
      s.animationTimingFunction = "steps(" + textLen + "),steps(1)";; //动态设置steps
      s.animationName = `typing${itemLen}`; //文本长度不同，展示的宽度就不同，所以需要动态设置
      s.animationDuration = `${itemLen/2}s,0.5s`; //这儿设置速度
    }
    setTimeout(() => {
      func(j + 1)
    },itemLen*500) //这儿和上面的animationDuration速度一致，只不过这儿是毫秒，所以要乘以1000
    
  }else{
    func(0); //就从头开始继续
  }
}
func(j);




{
  "editor.lineNumbers": "on", //开启行数提示
  "editor.quickSuggestions": {
    //开启自动显示建议
    "other": true,
    "comments": true,
    "strings": true
  },
  "prettier.useTabs": true, //使用制表符缩进
  "editor.tabSize": 2, //制表符符号eslint
  "editor.formatOnSave": true, //每次保存自动格式化
  "prettier.semi": true, //去掉代码结尾的分号
  "prettier.singleQuote": true, //使用单引号替代双引号
  "prettier.trailingComma": "none", //去除对象最末尾元素跟随的逗号
  "javascript.format.insertSpaceBeforeFunctionParenthesis": true, //让函数(名)和后面的括号之间加个空格
  "vetur.format.defaultFormatter.html": "js-beautify-html", //格式化.vue中html
  "vetur.format.defaultFormatter.js": "vscode-typescript", //让vue中的js按编辑器自带的ts格式进行格式化
  "[vue]": {
    "editor.defaultFormatter": "esbenp.prettier-vscode"
  },
  "[javascript]": {
    "editor.defaultFormatter": "esbenp.prettier-vscode"
  },
  "eslint.run": "onSave",
  "editor.codeActionsOnSave": {
    "source.fixAll.eslint": true
  },
  "prettier.printWidth": 200, //指定代码长度，超出换行
  "prettier.requireConfig": true, //需要prettier.requireConfig格式化
  "prettier.useEditorConfig": false,
  // "eslint.validate": [
  //   //开启对.vue文件中错误的检查
  //   "javascript",
  //   "javascriptreact",
  //   {
  //     "language": "html",
  //     "autoFix": true
  //   },
  //   {
  //     "language": "vue",
  //     "autoFix": true
  //   }
  // ],
  "terminal.integrated.rendererType": "dom",
  "[typescript]": {
    "editor.defaultFormatter": "esbenp.prettier-vscode"
  }
}




































